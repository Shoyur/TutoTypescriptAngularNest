{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction ProductAlertsComponent_p_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"p\")(1, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function ProductAlertsComponent_p_0_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.notify.emit());\n    });\n    i0.ɵɵtext(2, \"Notify Me\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class ProductAlertsComponent {\n  constructor() {\n    // pour que le composant ProductAlertsComponent puisse recevoir des données\n    // du parent, il faut importer le module Input de @angular/core\n    // ainsi le decorator @Input indique l'info qui arrive du composant parent\n    // ici, (product!) le bang! indique que cette valeur ne peut pas être null ou undefined\n    // Explication :\n    // parce-que j'ai mis le <app-product-alerts [product]=\"product\"></app-product-alerts>\n    // dans le product-list.component.html qui lui a une boucle de \"product\"\n    // ce composant ci, utilise avec le @Input ce fameux \"product\" et exécute le\n    // product-alerts.component.html avec\n    //    <p *ngIf=\"product && product.price > 700\">\n    //      <button type=\"button\">Notify Me</button>\n    //    </p>\n    // donc ce bouton Notify Me apparait si > 700 dans product-list.component.html\n    // évidemment, le parent doit avoir l'objet du @Input\n    this.notify = new EventEmitter();\n  }\n}\nProductAlertsComponent.ɵfac = function ProductAlertsComponent_Factory(t) {\n  return new (t || ProductAlertsComponent)();\n};\nProductAlertsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ProductAlertsComponent,\n  selectors: [[\"app-product-alerts\"]],\n  inputs: {\n    product: \"product\"\n  },\n  outputs: {\n    notify: \"notify\"\n  },\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [\"type\", \"button\", 3, \"click\"]],\n  template: function ProductAlertsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ProductAlertsComponent_p_0_Template, 3, 0, \"p\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.product && ctx.product.price > 700);\n    }\n  },\n  dependencies: [i1.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAAA,SAAmCA,YAAY,QAAQ,eAAe;;;;;;ICAtEC,yBAA0C;IACpBA;MAAAA;MAAA;MAAA,OAASA,mCAAa;IAAA,EAAC;IAACA,yBAAS;IAAAA,iBAAS;;;ADOhE,OAAM,MAAOC,sBAAsB;EALnCC;IASE;IACA;IACA;IAEA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IAEU,WAAM,GAAG,IAAIH,YAAY,EAAE;;;AAtB1BE,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;QAAtBA,sBAAsB;EAAAE;EAAAC;IAAAC;EAAA;EAAAC;IAAAC;EAAA;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCRnCX,mEAEI;;;MAFAA,6DAAoC","names":["EventEmitter","i0","ProductAlertsComponent","constructor","selectors","inputs","product","outputs","notify","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\Angular\\Tuto1Cart\\src\\app\\product-alerts\\product-alerts.component.ts","C:\\xampp\\htdocs\\Angular\\Tuto1Cart\\src\\app\\product-alerts\\product-alerts.component.html"],"sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Product } from '../products';\n\n@Component({\n  selector: 'app-product-alerts',\n  templateUrl: './product-alerts.component.html',\n  styleUrls: ['./product-alerts.component.css']\n})\nexport class ProductAlertsComponent {\n\n  @Input() product!: Product;\n\n  // pour que le composant ProductAlertsComponent puisse recevoir des données\n  // du parent, il faut importer le module Input de @angular/core\n  // ainsi le decorator @Input indique l'info qui arrive du composant parent\n  \n  // ici, (product!) le bang! indique que cette valeur ne peut pas être null ou undefined\n\n  // Explication :\n  // parce-que j'ai mis le <app-product-alerts [product]=\"product\"></app-product-alerts>\n  // dans le product-list.component.html qui lui a une boucle de \"product\"\n  // ce composant ci, utilise avec le @Input ce fameux \"product\" et exécute le\n  // product-alerts.component.html avec\n  //    <p *ngIf=\"product && product.price > 700\">\n  //      <button type=\"button\">Notify Me</button>\n  //    </p>\n  // donc ce bouton Notify Me apparait si > 700 dans product-list.component.html\n\n  // évidemment, le parent doit avoir l'objet du @Input\n\n  @Output() notify = new EventEmitter();\n\n  // pour que le composant ProductAlertsComponent puisse envoyer des données\n  // au parent, il faut importer le module Output et EventEmitter de @angular/core\n  // ainsi le decorator @Output indique l'info qui arrive du composant parent\n\n  // Celà va émettre un événement lorsque la valeur notify va changer\n  // il faut ensuite ajouter une liaison d'événement (event binding)\n  // comme par exemple <button type=\"button\" (click)=\"notify.emit()\">Notify Me</button>\n  // dans ce component ci (lui-même: product-alerts)\n  // donc on s'affecte nous-même avec un listener d'événement disons\n  // car c'est justement nous qui envoyons cet événement au parent\n\n  // donc ensuite on mets un onNotify() dans product-list.component.ts\n  // car c'est directmeent du code à exécuter\n  \n\n}\n","<p *ngIf=\"product && product.price > 700\">\n<button type=\"button\" (click)=\"notify.emit()\">Notify Me</button>\n</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}